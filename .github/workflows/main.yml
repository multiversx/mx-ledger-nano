name: Build Device App and Test Apps

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      Version:
        description: "Version"
        required: true
        default: "v1.0.0"
      APPVERSION_M:
        description: "APPVERSION_M"
        required: true
        default: "1"
      APPVERSION_N:
        description: "APPVERSION_N"
        required: true
        default: "0"
      APPVERSION_P:
        description: "APPVERSION_P"
        required: true
        default: "0"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:     
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: New release
        draft: false
        prerelease: true
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
  
  build-device-app:
    name: Build and Upload Device App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install system dependencies
        run: |
          sudo apt install gcc-multilib g++-multilib -y
          python3 --version
          pip3 --version
          pip3 install Pillow
      - name: Install buildchain
        run: |
          mkdir buildchain
          mkdir buildchain/clang-arm-fropi
          mkdir sdk
          mkdir sdk/nanos-secure-sdk

          wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
          tar xf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
          rm gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
          mv gcc-arm-none-eabi-10-2020-q4-major buildchain/gcc-arm-none-eabi-10-2020-q4-major

          wget https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz -O clang+llvm.tar.xz
          tar xf clang+llvm.tar.xz
          rm clang+llvm.tar.xz
          mv clang+llvm-10.0.0-x86_64-linux-gnu-ubuntu-18.04/* buildchain/clang-arm-fropi

          wget https://github.com/LedgerHQ/nanos-secure-sdk/archive/refs/tags/2.0.0-1.tar.gz -O nanos-secure-sdk.tar.gz
          tar xf nanos-secure-sdk.tar.gz
          rm nanos-secure-sdk.tar.gz
          mv nanos-secure-sdk-2.0.0-1/* sdk/nanos-secure-sdk
      - name: Build project
        run: |
          BOLOS_ENV=$(pwd)/buildchain BOLOS_SDK=$(pwd)/sdk/nanos-secure-sdk APPVERSION_M=${APPVERSION_M} APPVERSION_N=${APPVERSION_N} APPVERSION_P=${APPVERSION_P} make
      
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          upload_url=`cat release_url/release_url.txt`
          echo "::set-output name=upload_url::$upload_url" 
      
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: bin/app.hex
          asset_name: elrond-ledger-app-${{ github.event.inputs.Version }}.hex
          asset_content_type: application/octet-stream 

  build-testApps-linux-and-mac:
    strategy:
      matrix:
        runs-on: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.runs-on }}
    name: Build
    steps:
    - name: Set up Go 1.15.7
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.7
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: | 
        cd ${GITHUB_WORKSPACE}/testApp/cmd/testApp
        go build -v .
        cd ${GITHUB_WORKSPACE}/testApp/cmd/testMsgSign
        go build -v .
        cd ${GITHUB_WORKSPACE}/testApp/cmd/testTxHashSign
        go build -v .
      
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      run: |
        upload_url=`cat release_url/release_url.txt`
        echo "::set-output name=upload_url::$upload_url" 

    - name: Upload Release Asset - TestApp
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./testApp/cmd/testApp/testApp
        asset_name: ElrondTestApp_${{ matrix.runs-on }}_${{ github.event.inputs.Version }}
        asset_content_type: application/octet-stream
        
    - name: Upload Release Asset - TestMsgSign
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./testApp/cmd/testMsgSign/testMsgSign
        asset_name: ElrondTestMsgSign_${{ matrix.runs-on }}_${{ github.event.inputs.Version }}
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - TestTxHashSign
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./testApp/cmd/testTxHashSign/testTxHashSign
        asset_name: ElrondTestTxHashSign_${{ matrix.runs-on }}_${{ github.event.inputs.Version }}
        asset_content_type: application/octet-stream
  
  build-testApps-windows:
    runs-on: windows-latest
    steps:
    - name: Set up Go 1.15.7
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.7
      id: go
      
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      
    - name: Build testApp
      run: | 
        cd ./testApp/cmd/testApp
        go build -v .
        
    - name: Build testMsgSign
      run: | 
        cd ./testApp/cmd/testMsgSign
        go build -v .

    - name: Build testTxHashSign
      run: |
        cd ./testApp/cmd/testTxHashSign
        go build -v .
    
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      run: |
        $upload_url = Get-Content release_url/release_url.txt -Raw
        echo "::set-output name=upload_url::$upload_url"
      shell: powershell
        
    - name: Upload Release Asset - TestApp
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./testApp/cmd/testApp/testApp.exe
        asset_name: ElrondTestApp_${{ matrix.runs-on }}_${{ github.event.inputs.Version }}.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Release Asset - TestMsgSign
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./testApp/cmd/testMsgSign/testMsgSign.exe
        asset_name: ElrondTestMsgSign_windows-latest_${{ github.event.inputs.Version }}.exe
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - TestTxHashSign
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./testApp/cmd/testTxHashSign/testTxHashSign.exe
        asset_name: ElrondTestTxHashSign_windows-latest_${{ github.event.inputs.Version }}.exe
        asset_content_type: application/octet-stream
